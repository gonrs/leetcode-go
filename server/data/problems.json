[
  {
    "title":"Sum of squares",
    "body":"Given 2 numbers a and b. You need to return the sum of their squares.\n\n\nExample 1:\n- Input: 10, 20\n- Output: 500\n\nExample 2:\n- Input: 3, 4\n- Output: 25",
    "difficulty":0,
    "solution":"```go\nfunc Code(a string, b string) string{\n\tnreturn a*a + b*b;\n}\n```"
  },
  {
    "title":"Merge Strings Alternately",
    "body":"You are given two strings `word1` and `word2`. Merge the strings by adding letters in alternating order, starting with `word1`. If a string is longer than the other, append the additional letters onto the end of the merged string.\n\nReturn the merged string.\n\n### Example 1:\n\n**Input:**  \n`word1 = \"abc\"`, `word2 = \"pqr\"`  \n\n**Output:**  \n`\"apbqcr\"`  \n\n**Explanation:**  \nThe merged string will be merged as so:  \nword1: a b c\nword2: p q r\nmerged: a p b q c r\n\n\n### Example 2:\n\n**Input:**  \n`word1 = \"ab\"`, `word2 = \"pqrs\"`  \n\n**Output:**  \n`\"apbqrs\"`  \n\n**Explanation:**  \nNotice that as `word2` is longer, `\"rs\"` is appended to the end.  \nword1: a b\nword2: p q r s\nmerged: a p b q r s\n\n\n### Example 3:\n\n**Input:**  \n`word1 = \"abcd\"`, `word2 = \"pq\"`  \n\n**Output:**  \n`\"apbqcd\"`  \n\n**Explanation:**  \nNotice that as `word1` is longer, `\"cd\"` is appended to the end.  \nword1: a b c d\nword2: p q\nmerged: a p b q c d\n",
    "difficulty":0,
    "solution": "```go\nfunc Code(a string, b string) string{\n\tresult := \"\"\n\tfor i := 0; i < max(len(a), len(b)); i++ {\n\t\tif i < len(a) {\n\t\t\tresult += string(a[i])\n\t\t}\n\t\tif i < len(b) {\n\t\t\tresult += string(b[i])\n\t\t}\n\t}\n\treturn result\n}\n```" 
  },
  {
    "title":"Reverse Words in a String",
    "body":"Given an input string `s`, reverse the order of the words.\n\nA **word** is defined as a sequence of non-space characters. The words in `s` will be separated by at least one space.\n\nReturn a string of the words in reverse order concatenated by a single space.\n\n**Note** that `s` may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.\n\n### Example 1:\n\n**Input:**  \n`s = \"the sky is blue\"`  \n\n**Output:**  \n`\"blue is sky the\"`  \n\n### Example 2:\n\n**Input:**  \n`s = \"  hello world  \"`  \n\n**Output:**  \n`\"world hello\"`  \n\n**Explanation:**  \nYour reversed string should not contain leading or trailing spaces.\n\n### Example 3:\n\n**Input:**  \n`s = \"a good   example\"`  \n\n**Output:**  \n`\"example good a\"`  \n\n**Explanation:**  \nYou need to reduce multiple spaces between two words to a single space in the reversed string.\n",
    "difficulty":1,
    "solution": "```go\nfunc Code(s string) string{\n\ts = strings.TrimSpace(s)\n\tsubS := strings.Split(strings.Join(strings.Fields(strings.TrimSpace(s)), \" \"), \" \")\n\\n\tl := 0\n\tr := len(subS) - 1\\n\\tfor l < r {\n\t\\tsubS[l], subS[r] = subS[r], subS[l]\n\t\tl++\n\t\tr--\n\t}\n\treturn strings.Join(subS, \" \")\n}\n```"
  },
  {
    "title":"String Compression",
    "body":"Given an array of characters `chars`, compress it using the following algorithm:\n \n 1. Begin with an empty string `s`.\n 2. For each group of consecutive repeating characters in `chars`:\n    - If the group's length is 1, append the character to `s`.\n    - Otherwise, append the character followed by the group's length.\n \n The compressed string `s` should not be returned separately, but instead, be stored in the input character array `chars`. Note that group lengths that are 10 or longer will be split into multiple characters in `chars`.\n \n After you are done modifying the input array, return the new length of the array.\n \n You must write an algorithm that uses only constant extra space.\n \n ### Example 1:\n \n **Input:** `chars = [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]`\n \n **Output:** Return 6, and the first 6 characters of the input array should be: `[\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]`\n \n **Explanation:** The groups are \"aa\", \"bb\", and \"ccc\". This compresses to \"a2b2c3\".\n \n ### Example 2:\n \n **Input:** `chars = [\"a\"]`\n \n **Output:** Return 1, and the first character of the input array should be: `[\"a\"]`\n \n **Explanation:** The only group is \"a\", which remains uncompressed since it's a single character.\n \n ### Example 3:\n \n **Input:** `chars = [\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"\",\"b\",\"b\",\"b\",\"b\",\"b\"]`\n \n **Output:** Return 4, and the first 4 characters of the input array should be: `[\"a\",\"b\",\"1\",\"2\"]`\n \n **Explanation:** The groups are \"a\" and \"bbbbbbbbbbbb\". This compresses to \"ab12\".\n ",
    "difficulty":1,
    "solution": "```go\nfunc Code(chars []byte) int {\n\tif len(chars) <= 1 {\n\t\treturn len(chars)\n\t}\n\tcurrentGroup := chars[0]\n\tcount := 0\n\tresult := 0\n\tindex := 0\n\tfor _, char := range chars {\n\t\tif char == currentGroup {\n\t\t\tcount++\n\t\t} else {\n\t\t\tresult++\n\t\t\tchars[index] = currentGroup\n\t\t\tindex++\n\t\t\tif count > 1 {\n\t\t\t\tfor _, digit := range fmt.Sprintf(\"%d\", count) {\n\t\t\t\t\tchars[index] = byte(digit)\n\t\t\t\t\tresult++\n\t\t\t\t\tindex++\n\t\t\t\t}\n\t\t\t}\n\t\t\tcurrentGroup = char\n\t\t\tcount = 1\n\t\t}\n\t}\n\tresult++\n\tchars[index] = currentGroup\n\tindex++\n\tif count > 1 {\n\t\tfor _, digit := range fmt.Sprintf(\"%d\", count) {\n\t\t\tchars[index] = byte(digit)\n\t\t\tresult++\n\t\t\tindex++\n\t\t}\n\t}\n\treturn result\n}\n```"  
  }
]