[
  {
    "title":"Sum of squares",
    "body":"Given 2 numbers a and b. You need to return the sum of their squares.\n\n\nExample 1:\n- Input: 10, 20\n- Output: 500\n\nExample 2:\n- Input: 3, 4\n- Output: 25",
    "difficulty":0,
    "solution":"```go\nfunc Code(a string, b string) string{\n\tnreturn a*a + b*b;\n}\n```"
  },
  {
    "title":"Merge Strings Alternately",
    "body":"You are given two strings `word1` and `word2`. Merge the strings by adding letters in alternating order, starting with `word1`. If a string is longer than the other, append the additional letters onto the end of the merged string.\n\nReturn the merged string.\n\n### Example 1:\n\n**Input:**  \n`word1 = \"abc\"`, `word2 = \"pqr\"`  \n\n**Output:**  \n`\"apbqcr\"`  \n\n**Explanation:**  \nThe merged string will be merged as so:  \nword1: a b c\nword2: p q r\nmerged: a p b q c r\n\n\n### Example 2:\n\n**Input:**  \n`word1 = \"ab\"`, `word2 = \"pqrs\"`  \n\n**Output:**  \n`\"apbqrs\"`  \n\n**Explanation:**  \nNotice that as `word2` is longer, `\"rs\"` is appended to the end.  \nword1: a b\nword2: p q r s\nmerged: a p b q r s\n\n\n### Example 3:\n\n**Input:**  \n`word1 = \"abcd\"`, `word2 = \"pq\"`  \n\n**Output:**  \n`\"apbqcd\"`  \n\n**Explanation:**  \nNotice that as `word1` is longer, `\"cd\"` is appended to the end.  \nword1: a b c d\nword2: p q\nmerged: a p b q c d\n",
    "difficulty":0,
    "solution": "```go\nfunc Code(a string, b string) string{\n\tresult := \"\"\n\tfor i := 0; i < max(len(a), len(b)); i++ {\n\t\tif i < len(a) {\n\t\t\tresult += string(a[i])\n\t\t}\n\t\tif i < len(b) {\n\t\t\tresult += string(b[i])\n\t\t}\n\t}\n\treturn result\n}\n```" 
  },
  {
    "title":"Reverse Words in a String",
    "body":"Given an input string `s`, reverse the order of the words.\n\nA **word** is defined as a sequence of non-space characters. The words in `s` will be separated by at least one space.\n\nReturn a string of the words in reverse order concatenated by a single space.\n\n**Note** that `s` may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.\n\n### Example 1:\n\n**Input:**  \n`s = \"the sky is blue\"`  \n\n**Output:**  \n`\"blue is sky the\"`  \n\n### Example 2:\n\n**Input:**  \n`s = \"  hello world  \"`  \n\n**Output:**  \n`\"world hello\"`  \n\n**Explanation:**  \nYour reversed string should not contain leading or trailing spaces.\n\n### Example 3:\n\n**Input:**  \n`s = \"a good   example\"`  \n\n**Output:**  \n`\"example good a\"`  \n\n**Explanation:**  \nYou need to reduce multiple spaces between two words to a single space in the reversed string.\n",
    "difficulty":1,
    "solution": "```go\nfunc Code(s string) string{\n\ts = strings.TrimSpace(s)\n\tsubS := strings.Split(strings.Join(strings.Fields(strings.TrimSpace(s)), \" \"), \" \")\n\\n\tl := 0\n\tr := len(subS) - 1\\n\\tfor l < r {\n\t\\tsubS[l], subS[r] = subS[r], subS[l]\n\t\tl++\n\t\tr--\n\t}\n\treturn strings.Join(subS, \" \")\n}\n```"
  }
]